var tipuesearch = {"pages": [{'title': 'About', 'text': '個人倉儲： https://github.com/Peichen1128/cad2023 \n 41123201的網站，老是無法順利從Replit更新的人 (\u2060ノ\u2060｀\u2060Д\u2060 ´\u2060 )\u2060ノ\u2060彡\u2060┻\u2060━\u2060┻ \n 時不時就在重新創建跟Github自行上傳資料、直接修改程式間，瘋狂徘徊。 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': "https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers \xa0 (整數 int(), 浮點數 float()) \n Strings \xa0 (字串) \n print (Python 內建函式, \xa0 print() \xa0 函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt \xa0 動態頁面超文件). \n practice_html.txt \xa0 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 \xa0 class \xa0 後, 在範例導入時透過 \xa0 instance \xa0 引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator \xa0 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Filename: \xa0 .py \xa0 \n \n \n \n Run \xa0 Output \xa0 清除輸出區 清除繪圖區 Reload \n \n \n \n \n \n \n \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n \n \n \n \n \n \n \n \n Filename: \xa0 .py \xa0 \n \n \n \n Run \xa0 Output \xa0 清除輸出區 清除繪圖區 Reload \n \n \n \n \n", 'tags': '', 'url': 'Brython.html'}, {'title': '網路設定', 'text': '在SCITE編輯器上修改副檔名 .ps1中的IPv6固定位址 ,確認自己的IPv6 address並修改上去。 \n \n \n \n 先從 這裡 確認你的班級序號 \n \n \n 下載 網路設定檔案 \n \n \n 同時下載 SCITE 編輯器: \xa0 wscite.7z \n \n \n 編輯修改 .ps1 中的 IPv6 固定位址, 放入自己的固定 IPv6 address \n \n \n \n', 'tags': '', 'url': '網路設定.html'}, {'title': '操作影片', 'text': '參考並詢問同組同學，實際操作並完成設定檔。   \n 網路設定檔.mp4 \n', 'tags': '', 'url': '操作影片.html'}, {'title': '動作解說', 'text': '原先為延用過去一年上隨身碟內原有的設定檔，但由於學校的網路更新後，只能手動操作，於W11週後使用新的設定檔，並自行設定。   \n 步驟一  從mde .tw中，找到home選單底下的reval。   \n \n    步驟二  往後翻找至 "有關網路設定 "，並下載網路設定檔。   \n \n        步驟三  下載後並解壓逤。   \n \n \n 步驟四  將資料夾中的 "1 _disable _ipv4 "從 "SciTE "打開。   \n \n    步驟五  修改內文的 " 2 0 0 1 : 2 8 8 : 6 0 0 4 : 1 7 : 2 0 2 3 : c a d b : :序號 "  序號至 https://mde.tw/cadnote/content/links.html \xa0查看並修改。 \n \n \n', 'tags': '', 'url': '動作解說.html'}, {'title': 'W12', 'text': '2b_w12_seat.txt \n 2a_w12_seat.txt \n w12_2b_1.mp4 \xa0(利用 簡報 說明最新的網路設定流程, 以及 w12 的課堂測驗內容) \n 校方的 DHCP6 並沒有正確設定系上的 IPv6 Gateway, 也沒有 DNS 伺服器設定, 使用者必須自行根據 所分配的固定 IPv6 位址 進行設定, 另外校方的 IPv6 DNS 伺服器也無法正常運作, 必須使用系上的 DNS server 設定. \n Windows 網路查詢指令: ipconfig /all \n DNS 伺服器查詢指令: nslookup \n 查詢至特定主機的路徑指令: tracert \n 其他 Windows 常用的網路指令 \n w12_2b_2.mp4 \xa0 ( 利用 簡報 說明如何將座次表放到倉儲 downloads 目錄, 且將連結放入 w12 頁面) \n 利用人工或電腦輔助方法建立 w12 頁面中的班上學員座次表? \n \n w12_2a_1.mp4 \xa0 (ssh-keygen 在 .ssh 建立 id_rsa 與 id_rsa.pub, 以 sftp 放入 config, 並利用 puttygent 將 id_rsa 轉為 .ppk 以便設立 session 用) \n w12_2a_2.mp4 \xa0 (如何利用 ChatGPT 協助解決座位排序與列印問題) \n w12_2a_3.mp4 \xa0 (有關 Solvespace 基本繪圖與轉檔, 最後說明如何利用 IPv6 相容的 Python 與 CoppeliaSim 進行互動) \n 使用 ChatGPT 協助處理 上述 問題一 : \n 輸入1: (在雙引號之後, 直接將檔案內容複製貼上, 作為輸入內容) \n 請利用 Python 讀取下列檔案名稱為 2b_w12_seat.txt "2b stud num\xa0\xa0 \xa0seat 41123201\xa0\xa0 \xa0 41123202\xa0\xa0 \xa0(3,8) 41123203\xa0\xa0 \xa0(3,7) 41123204\xa0\xa0 \xa0(6,8) ~~~ 中間資料沒有列出來 41136124\xa0\xa0 \xa0(3,2) 41136126\xa0\xa0 \xa0 41136131\xa0\xa0 \xa0" \n ChatGPT 回覆1: \n 要讀取這個檔案，你可以使用 Python 的檔案處理功能。以下是一個基本的範例程式碼，可以協助你達成這個目標： \n w12_chatgpt_prob1_ans1.py \n 這個程式碼會將學號和座位號的對應關係存儲在一個字典中，然後顯示出來。請注意，這裡使用 strip() 方法來去除空格和換行符號。 請確保你的檔案路徑正確，並注意檔案的編碼，以確保正確讀取中文內容。 \n 討論1: 經執行 ChatGPT 回覆的程式, 已經可以讀取資料, 並且列出資料. 但資料沒有排序. \n 輸入2: \n 假如前面程式中的座位號第一個 index 代表"列"而第二個 index 代表行, 請延續上個程式, 由左到右作為每一列的順序, 而且希望陣列排序是列出該位置上的學員學號 \n ChatGPT 回覆2: \n 了解，如果要按照座位號的列和行來排序並列出每個位置上的學號，我們可以修改程式碼來實現。以下是修改後的程式碼： \n w12_chatgpt_prob1_ans2.py \n 這裡我們使用了 sorted 函數，並通過 key 參數指定排序規則，即按照列和行的順序進行排序。最後，我們顯示排序後的結果，列出每個位置上的學號。 \n 討論2: 經執行 ChatGPT 回覆的程式, 所讀取的資料已經排序. \n \n 輸入3: \n 假如 "2b_w12_seat.txt" 可以從 "https://mde.tw/cadnote/downloads/2b_w12_seat.txt" 這個網址讀取, 而且希望將上一個 Python 程式改用 Brython 編寫, 要如何修改? \n ChatGPT 回覆3: \n Brython 是一個允許在瀏覽器中運行 Python 3 代碼的工具，而在瀏覽器中讀取外部檔案通常會涉及到跨網域 (Cross-Origin) 的問題。為了避免這些問題，我們可以使用 JavaScript 來在瀏覽器中讀取檔案，然後將檔案內容傳遞給 Brython。以下是修改後的 Brython 程式碼： \n (因為我們不使用 ChatGPT 混用 Javascript 與 Brython 的建立, 所以此地 不列出其回覆的原始碼 ) \n 這個 HTML 文件引入了 Brython，然後使用 JavaScript 的 XMLHttpRequest 將檔案內容從指定的 URL 讀取並傳遞給 Brython 的 eval 函數。在 eval 函數中執行 Python 代碼。這樣就可以在瀏覽器中運行 Python 代碼，同時解決了跨網域的問題。請注意，這裡假設檔案是文本格式，如果是二進制檔案，需要進一步處理。 \n 討論3: ChatGPT 建議的程式或許也能達成目的, 但是混用 Javascript 與 Brython 並不是目前所需, 因此不採用. \n \n 輸入4: \n 假如我們已經知道 Brython 可以利用 open(https://mde.tw/cadnote/downloads/2b_w12_seat.txt).read() 或 open(https://mde.tw/cadnote/downloads/2b_w12_seat.txt).readlines() 讀取到檔案, 可以將上一個程式全部改用 Brython 完成嗎? \n ChatGPT 回覆4: \n 是的，如果你已經知道 Brython 可以使用 open("https://mde.tw/cadnote/downloads/2b_w12_seat.txt").read() 或 open("https://mde.tw/cadnote/downloads/2b_w12_seat.txt").readlines() 讀取檔案，你可以將上述 Python 程式碼轉換為 Brython 程式碼。以下是修改後的程式碼： \n w12_chatgpt_prob1_ans3_brython.py \xa0 (這裡已經配合 cmsite 中的 Brython 環境, 可以 直接從 Gist 取出執行 ) \n 這個 HTML 文件使用 Brython 在瀏覽器中運行 Python 3 代碼。Brython 的 open 函數會模擬 Python 的 open 函數，讓你能夠在瀏覽器中讀取檔案。這樣就可以使用和在 Python 中一樣的方式處理檔案，同時在瀏覽器中運行。 \n 討論4: ChatGPT 因為帶有非常大量的邏輯變數, 因此詢問時若能給予明確指示, 將可能取得更有用的回答. \n 接下來就可以延續上述回覆所得到的程式碼, 加以研究後再修改為其他格式的資料輸出, 例如: \xa0 直接在 Brython 執行後, 列出所需要的 html 物件 . \n', 'tags': '', 'url': 'W12.html'}, {'title': '座位表', 'text': '以下為參照 https://mde.tw/cadnote/downloads/2b_w12_seat.txt  及已知同學位置。 \n \n', 'tags': '', 'url': '座位表.html'}, {'title': '未登入資料名單', 'text': '41123219  \n 41123228  \n 41123244  \n 4 1123248  \n 4 1136126  \n 41136131 \n', 'tags': '', 'url': '未登入資料名單.html'}, {'title': 'W13-14', 'text': '有關磁力吸引的鋼球循環運動系統, 請參考 這個影片 . \xa0 或者透過課程檔案下載密碼觀看 這個影片 . \n 根據 這個網站 宣稱是此一 Perpetual Motion Simulator 的原始創作者. \n 同時參考\xa0 A perpetual motion machine powered by electromagnetism.pdf \xa0 (需要下載密碼) \n 電腦輔助設計與實習課程的任務一即可根據此一裝置的設計, 先採用電腦輔助設計軟體, 繪製系統所需的 3D 零組件, 然後轉為 STL 格式, import 進入 CoppeliaSim, 接著根據影片說明, 利用近接感測器(例如: \xa0 電感式近接開關 , \xa0 Inductive proximity sensor ) 控制電磁鐵開關, 設法透過磁力吸引讓鋼球具有足夠動能返回圓形平台. \n 有關利用 Arduino 控制卡與相關電路設計產生電磁力控制的模擬, 請參考 \xa0 PICSimLab \xa0 頁面中的說明. \n 一旦完成 CoppeliaSim 與 Arduino 電路設計等機電資系統整合模擬, 就可以進一步利用 3D printer 列印出所需零組件, 結合實體電路設計完成此一系統的虛實整合. \n 機電模擬系統: \n 下載支援 IPv6 網路協定版本 \xa0 CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z \xa0 (需要下載密碼) \n CoppeliaSim 使用者手冊 , \xa0 CoppeliaSim 4.3.0 使用手冊網站 \n 模擬磁力的 討論 , \xa0 1 , \xa0 2 \n Force Control Modeling \n simpleMagnetDemo.ttt \n 模擬原理: \n Perpetual Motion Simulator 主要的電路設計包含右側軌道下方的電磁鐵, 通電後可產生一定大小的磁吸力, 當圓形鐵球循著軌道由平台孔洞往下滾動, 經過軌道下方近接感測器 (Proximity sensor) 時 (距離 3mm-5mm), 透過感應, 控制電路將會短暫啟動電磁鐵 (10 miliseconds), 促使圓形鐵球加速滾動, 其磁力大小約略與圓形鐵球距離的平方成反比 ( Computational Electromagnetics , \xa0 磁場模擬 ). \n 因此圓形鐵球除了從平台高度落下時, 將位能轉換為動能外, 與軌道滾動磨擦以及空氣阻力所損耗的運動能, 將額外由電磁鐵開關間所得到的磁力吸引能量進行加速, 以便取得足夠的動能在脫離軌道末端後, 重新回到圓形平台. \n', 'tags': '', 'url': 'W13-14.html'}, {'title': 'CoppeliaSim操作影片', 'text': '經由反覆觀看影片後，自行操作。 \n CoppeliaSim操作影片 \n', 'tags': '', 'url': 'CoppeliaSim操作影片.html'}, {'title': 'CoppeliaSim操作', 'text': '步驟一\u3000將 project1_w14_simple.7z 內的"project1_w14_simple.ttt"匯入"CoppleliaSim"。 \n \n \n 步驟二\u3000開啟 "Protable_2023_fall"資料夾中的 "SciTE "。 \n \n \n 步驟三\u3000 將資料夾中的 "project1_w14_simple.py "匯入 "SciTE "。 \n \n 步驟四\u3000展開 "SciTE "中的"tools"，點選"GO"執行。 \n \n \n 成果 \n \n', 'tags': '', 'url': 'CoppeliaSim操作.html'}, {'title': 'Wink', 'text': '學習如何利用 \xa0 Wink \xa0 製作電腦操作流程影片, 並將影片放入個人與分組網頁中. \n 首先使用者必須了解 \xa0 Wink \xa0 製作影片的功能與 \xa0 ShareX \xa0 相同, 都是依賴 \xa0 ffmpeg.exe . 意即使用 \xa0 Wink \xa0 之前必須在 Preferences 中先行設定 ffmpeg.exe 所在位置, 否則無法對所建立的專案轉為 mp4 檔案. \n 另外, 若擷取關鍵影格的電腦螢幕解析度大於 1008 x 630, 通常建立將影格 resize, 以方便使用者在手機上觀看影片. \n 利用 Wink 建立操作影片的步驟: \n \n 設定 ffmpeg.exe 所在位置, 若使用隨身碟中的可攜程式系統, 可將 ffmpeg.exe 放在 data 目錄中, 並以 wink_ffmpeg.reg 進行設定, 也可將 Wink 的啟動與 start_ipv6.bat 進行整合. \n 開啟 Wink 新專案. \n 每按下一次 Pause 鍵, 可擷取操作過程中的畫面影格 (利用 Zoomit 放大所要強調的操作內容, 並以紅線框列). \n 操作錄製結束後, 從右下方的 Tray 中, 以滑鼠左鍵點選, 在 Wink 圖示中, 以滑鼠右鍵帶出 Finish Capture 按鍵, 點選後即可回到 Wink 專案區. \n 在每一頁影格中加入註解說明 TextBox 之前, 先利用 Project - Resize All Frames 將影格縮小至 1008 x630. \n 完成註解說明後, 可以逐一移動各頁面滑鼠游標位置, 並決定各頁面影片播放時的停留時間. \n 最後以 Render 按鈕進行轉檔, 並利用 View Rendered Output 檢視所建立的操作影片. \n \n \n', 'tags': '', 'url': 'Wink.html'}, {'title': 'Wink操作影片', 'text': '', 'tags': '', 'url': 'Wink操作影片.html'}, {'title': '分組作業', 'text': '2b 進行九人一組安排固定座位, 由組長建立 cad2023_bg1 ~ cad2023_bg6, 並將 mdecycu 設為協同者. \n 各九人分組必須在 w9 之前繳出下列圖示的 3D 可自行列印的零組件模型, 含各 CAD 套件的完整安裝與零組件繪圖過程影片(期中考週由各組進行簡報) . \n \n SolidWorks, 請採用 \xa0 2022 以上版本 , 安裝檔案 SOLIDWORKS 2022 SP3.1_20220711.7z 16GB. 參考資料: \xa0 http://wcm.cycu.org:88/github/cad2019/downloads/Solidworks_Tutorial/ \xa0 (在系網以 IPv6 連線開啟) \n NX, 請採用 \xa0 NX2027.3401_lite_cad2022.7z \xa0 (需要下載密碼, 下載 2GB, 解開後約 8GB). \n Inventor, 請在校網或使用 VPN 下載 2022 版本 (載點 \xa0 1 , \xa0 2 , \xa0 3 , 安裝檔案 Inventor_Pro_2022_Traditional_Chinese_Win_64bit_Dlm_001_003.sfx.exe 2GB). \n Solid Edge, 請使用 \xa0 Community Edition , Gmail 登入後, 下載 Solid_Edge_Community_2023_2210.exe 3.8GB. \n Creo, 請使用 \xa0 Student Edition , 以學校電子郵箱註冊可以下載 Creo 10 (MED-100WIN-CD-470_10-0-0-0_Win64.zip 安裝檔案 5.9GB), \xa0 參考資料 . \n Onshape . \n Fusion 360, 請在校網或使用 VPN \xa0 下載 , Fusion 360 Admin Install.exe 安裝檔案 GB. \n \n', 'tags': '', 'url': '分組作業.html'}, {'title': '磁力吸引', 'text': '參照： https://mde.tw/cadnote/content/w6-w7.html \n 維護 cad2023 倉儲與網站的方法: \n \n Replit + Github \n 可攜環境 + Github (下載包含 Python 3.12.0, Tiny C Compiler 與 CoppeliaSim 4.5.1 的 \xa0 portable_2024_cp_wcms_cad_cd_w_ebooks.7z , 1.2GB 解開後 3.3GB, 需要下載密碼), 維護倉儲與網站說明影片 之一 , \xa0 之二 . \n 自架伺服器 + Github \n \n 進行網頁維護以及兼任組長，原先都是以使用Replit做更新動作，但由於Replit官方於約11 /20前\xa0  後，推出新方案，限制一般未訂購方案用戶的CPU、RAM效能，以至於有段時間只能以Github的藏儲直接做程式修改。 \n', 'tags': '', 'url': '磁力吸引.html'}, {'title': 'W7', 'text': '在建立組別的網站，不小心誤刪設定中Page裡所顯示的網址，透過Actions去做修復的動作。 \n 利用Actions(下圖畫面為點入後)，點選左邊的" pages-build-deployment" ，找到並點選錯誤的作動後，再點選"Re-run all job"，即完成回復動作。 \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '段考週\u3000考試跟報告好多ＱＱ,努力維修中 \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W10-11', 'text': '由於組別的網頁無法透過Replit更新，暫時經由Github進行直接修改。 \n 從Code頁面點選\'content\'選擇所要更改的部分。 \n \n 以下以更改組員名單並附上各位成員的個人網站連結為例。 \n 進入程式後，找到需修改的部分(圖中為名單主要部分)，在每人學號、姓名後面加上網址。 \n 新增 網址的 程式碼為： \n <h6><a href="個人網站網址"> 個人網站網址" </a></h6> \n *主要參照About中的倉儲連結打法 \n \u3000 <h6>\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 字體大小 \n \u3000 <a href=\u3000\u3000\u3000\u3000\u3000\u3000</a>顯示並連結網址 \n \n', 'tags': '', 'url': 'W10-11.html'}, {'title': '個人評分', 'text': '倉儲與網站評分項目: \n A: 是否 按照進度明確標示倉儲的改版歷程 \n B: 是否根據 \xa0 IPv4 與 IPv6 \xa0 網路環境設定進行作法討論 \n C: 是否就 \xa0 Replit、s.cycu.org 與 localhost \xa0 情境下對個人與分組倉儲進行設定操作 \n D: 是否就所分配的 \xa0 CAD 套件 從安裝設定到繪圖提供內容參考 \n E: 是否使用所分配的 CAD 套件完成 專案一零組件繪圖 , 並提供零組件下載 \n F: 是否將自行繪製的專案一零組件 轉入 CoppeliaSim \n G: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案一轉入的零組件設定感測器, 並進行 鋼球永動模擬 \n H: 是否實際操作 \xa0 Triangle 軌道系統 的鋼球永動模擬 \n I: 是否完成 W15 的平面雙 U 迴路上的 鋼球永動系統繪圖、轉檔與系統模擬 \n J: 是否使用所分配的 CAD 套件完成 專案二 1D 平台零組件繪圖 , 並提供零組件下載 \n K: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬 \n L: 是否針對專案二的 1D 平台鋼球平衡系統所需的 \xa0 PID 控制理論 進行資料收集與 ChatGPT 對答 \n 各學員倉儲與網站的評分及格標準為: \n 各學員必須在網站呈現 完整看過以下各階段的教學影片的歷程, 並了解其內容要旨 \n 並針對各階段 內容實際操作至少一遍 \n 教學影片: \n 1. \xa0 利用批次檔、登錄檔與 powershell 執行網路設定 \xa0 (7:15) \n 2. \xa0 Onshape 零組件轉入 CoppeliaSim \xa0 (19:58) \n 3. \xa0 從 github 空倉儲建立 cmsimde 網際內容管理倉儲 \xa0 (15:22) \n 4. \xa0 之二 \xa0 (34:20) \n 5. \xa0 利用 Pull Requests 提出修改 studlist 倉儲資料的用法 \xa0 (7:58) \n 6. \xa0 利用 SSH 協定取下倉儲並啟動編輯網站 \xa0 (22:05) \n 7. \xa0 之二 \xa0 (10:16) \n 8. \xa0 s.cycu.org 伺服器設定操作 \xa0 (18:47) \n 9. \xa0 之二 \xa0 (9:46) \n 10. \xa0 之三 \xa0 (13:58, 無語音說明) \n 11. \xa0 之四 \xa0 (21:30) \n 12. \xa0 之五 \xa0 (19:02) \n 13. \xa0 Wink 操作說明 \xa0 (2:05) \n 14. \xa0 課程內容摘要簡報說明 \xa0 (26:22) \n 15. \xa0 之二 \xa0 (12:22) \n 16. \xa0 利用 ChatGPt 協助座位排序與列印問題 \xa0 (9:36) \n 17. \xa0 之二 \xa0 (13:53, 有嚴重回音) \n 18. \xa0 利用 Solvespace 繪製零組件並轉入 CoppeliaSim \xa0 (17:55) \n 19. \xa0 之二 \xa0 (23:05, 有嚴重回音) \n 20. \xa0 簡化後的專案一綱球永動模擬操作 \xa0 (12:37) \n 21. \xa0 之二 \xa0 (9:33) \n 22. \xa0 之三 \xa0 (21:09) \n 23. \xa0 之四 \xa0 (4:34) \n 24. \xa0 專案二 \xa0 (16:46) \n 25. \xa0 之二 \xa0 (15:41) \n 26. \xa0 之三 \xa0 (14:15) \n 更新日誌 \n 於12月開始頻繁更新，前面時間大多更新分組的網頁，疏於更新個人帳號。 \n 20231108 新增W8段考週，及更改內容排序 20231201 新增W7內容、圖片 20231206 修改分組W7內容、新增分組W8內容 20231207 新增分組W10-11內容、圖片 20231221 修改分組W7、8內容 \n', 'tags': '', 'url': '個人評分.html'}, {'title': '自我評分', 'text': '自評分數：60 \n 個人負責整組的網站維護及更新，並且在自己網站努力更新內容，雖然過程很崎嶇，也還是很多尚未成形，但盡力在跟上進度，雖然在一年級時，甚至連網頁都不會架設，到現在可以習慣運用Replit及運用Github內座程式的修改，以達到網頁的更新，腳步或許是真的很緩慢，有時也因為個人因素未到或早退，而沒跟上進度，也在反覆觀看影片及嘗試，甚至是透過詢問同學，盡力完成課程目標。 \n \n ✔ A: 是否按照進度明確標示倉儲的改版歷程 \n \xa0 \xa0 \xa0✔ \xa0 按照更新時間標示，當日多次更新則加上-2....等 \n ✔ B: 是否根據 \xa0 IPv4 與 IPv6 \xa0 網路環境設定進行作法討論 \n \xa0 \xa0 \xa0✔\xa0 \xa0已製成影片上傳至個人網頁 \n *\xa0C: 是否就 \xa0 Replit、s.cycu.org 與 localhost \xa0 情境下對個人與分組倉儲進行設定操作 \n \xa0 \xa0 \xa0*\xa0 \xa0 已完成Replit部分，後兩者尚未完成 \n *\xa0D: 是否就所分配的 \xa0 CAD 套件 從安裝設定到繪圖提供內容參考 \n *\xa0E: 是否使用所分配的 CAD 套件完成 專案一零組件繪圖 , 並提供零組件下載 \n ----✔\u3000分配任務為更新網頁，過程的突發事件已更新至個人網頁---- \n ✔ F: 是否將自行繪製的專案一零組件 轉入 CoppeliaSim \n *\xa0G: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案一轉入的零組件設定感測器, 並進行 鋼球永動模擬 \n \xa0 \xa0 \xa0*\xa0 \xa0 正在努力嘗試完成 \n ✘ H: 是否實際操作 \xa0 Triangle 軌道系統 的鋼球永動模擬 \n ✘ I: 是否完成 W15 的平面雙 U 迴路上的 鋼球永動系統繪圖、轉檔與系統模擬 \n ✘ J: 是否使用所分配的 CAD 套件完成 專案二 1D 平台零組件繪圖 , 並提供零組件下載 \n ✘ K: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬 \n ✘ L: 是否針對專案二的 1D 平台鋼球平衡系統所需的 \xa0 PID 控制理論 進行資料收集與 ChatGPT 對答 \n', 'tags': '', 'url': '自我評分.html'}]};